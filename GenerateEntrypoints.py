import os

# Template for each module entry
MODULE_TEMPLATE = """#include "{header_path}"
CS_CREATE_MODULE_FACTORY_FUNCTION({module_name})
CS_CREATE_MODULE_METADATA_FUNCTION({module_name})
"""

def main():
    # Get the working directory
    working_dir = os.getcwd()
    autogenerator_name = os.path.basename(__file__)

    # assume folder name is the same as the module name
    module_name = os.path.basename(working_dir)
    header_path = os.path.join(working_dir, f"{module_name}.hpp")
    entrypoint_path = os.path.join(working_dir, "Entrypoint.cpp")

    # Check if the header file exists
    if os.path.isfile(header_path):
        with open(entrypoint_path, "w") as entrypoint_file:
            # Write a header comment with the autogenerator name
            entrypoint_file.write(f"// This code was generated by {autogenerator_name}\n")

            # Write the inclusion and factory function
            relative_header = os.path.relpath(header_path, working_dir).replace("\\", "/")
            entrypoint_file.write(MODULE_TEMPLATE.format(
                header_path=relative_header,
                module_name=module_name
            ))

        print(f"Generated Entrypoint.cpp for module '{module_name}' at: {entrypoint_path}")
    else:
        print(f"Warning: Expected header file '{header_path}' not found for module '{module_name}'.")

if __name__ == "__main__":
    main()
